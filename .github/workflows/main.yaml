name: terrarium - build and test images

# ci: trigger 1

on:
  push:
    branches: [master, main, develop]
    tags: ["v*"]
  pull_request:
  release:
    types: [released]
  workflow_dispatch:

env:
  IMAGE_BASE: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      next: ${{ steps.next.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # full history
          fetch-tags: true # ensure all tags are present

      - name: Dump context
        uses: ./.github/actions/dump-context

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get next version
        id: next
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -o pipefail
          npm ci
          npx semantic-release --dry-run --no-ci | tee sr.log || true
          version=$(grep -Eo 'next release version is [^ ]+' sr.log | awk '{print $NF}' || true)
          echo "::notice title=Discovered-version::${version}"
          echo "version=${version}" >> "$GITHUB_OUTPUT"

  # ----------------------------- Build & test (amd64)
  build-amd64:
    name: Build & test (linux/amd64)
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.head_ref != 'develop')
    needs: get-version
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    env:
      RELEASE_VERSION: ${{ needs.get-version.outputs.next }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/dump-context
      - uses: docker/setup-buildx-action@v3

      - name: Docker metadata (PR/push-safe)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/terrarium
          flavor: latest=false,suffix=-linux-amd64
          tags: |
            # PR/push generic tags
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            # Only add v* tag on non-PR events
            type=raw,value=v${{ env.RELEASE_VERSION }}-linux-amd64,enable=${{ github.event_name != 'pull_request' && env.RELEASE_VERSION != '' }}

      - uses: docker/login-action@v3
        # allow push on push events OR same-repo PRs (not forks)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build, push & test (amd64)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./terraform/docker
          file: terraform/docker/Dockerfile.terrarium
          platforms: linux/amd64
          target: test
          push: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          sbom: true

  # ----------------------------- Build & test (arm64)
  build-arm64:
    name: Build & test (linux/arm64)
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.head_ref != 'develop')
    needs: get-version
    runs-on: ubuntu-22.04-arm
    permissions: { contents: read, packages: write }
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    env:
      RELEASE_VERSION: ${{ needs.get-version.outputs.next }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/dump-context
      - uses: docker/setup-buildx-action@v3

      - name: Docker metadata (PR/push-safe)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/terrarium
          flavor: latest=false,suffix=-linux-arm64
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=v${{ env.RELEASE_VERSION }}-linux-arm64,enable=${{ github.event_name != 'pull_request' && env.RELEASE_VERSION != '' }}

      - uses: docker/login-action@v3
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build, push & test (arm64)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./terraform/docker
          file: terraform/docker/Dockerfile.terrarium
          platforms: linux/arm64
          target: test
          push: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          sbom: true

  # ----------------------------- PR snapshot manifest (multi-arch)
  pr-snapshot:
    name: Publish PR multi-arch snapshot
    needs: [build-amd64, build-arm64]
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Manifest tags without arch suffix:
      #   ghcr.io/...:pr-<num>, ghcr.io/...:sha-<sha>
      - name: Generate PR manifest tags
        id: prmeta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/terrarium
          flavor: latest=false
          tags: |
            type=ref,event=pr
            type=sha

      - name: Create & push PR manifest
        uses: int128/docker-manifest-create-action@v2
        with:
          tags: ${{ steps.prmeta.outputs.tags }}
          sources: |
            ghcr.io/${{ github.repository }}@${{ needs.build-amd64.outputs.digest }}
            ghcr.io/${{ github.repository }}@${{ needs.build-arm64.outputs.digest }}

  # ----------------------------- Real release path (non-PR)
  release:
    needs: [get-version, build-amd64, build-arm64]
    if: github.event_name != 'pull_request' && needs.get-version.outputs.next
    runs-on: ubuntu-latest
    permissions: { contents: write, packages: write, pull-requests: write }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # full history
          fetch-tags: true # ensure all tags are present
      - uses: ./.github/actions/dump-context
      - uses: actions/setup-node@v4
        with: { node-version: 24 }
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest
        uses: int128/docker-manifest-create-action@v2
        with:
          tags: |
            ghcr.io/${{ github.repository }}:v${{ needs.get-version.outputs.next }}
            ghcr.io/${{ github.repository }}:latest
          sources: |
            ghcr.io/${{ github.repository }}@${{ needs['build-amd64'].outputs.digest }}
            ghcr.io/${{ github.repository }}@${{ needs['build-arm64'].outputs.digest }}

      - name: Semantic-release (real run)
        env:
          SEMREL_VERSION: v${{ needs.get-version.outputs.next }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running semantic-release with version: $SEMREL_VERSION"
          npm ci
          npx semantic-release
